{"name":"Dustbin","tagline":"A slim wrapper around localStorage and sessionStorage that allows for NoSQL style access. It's basically a JSON-backed object database for your web browser.","body":"# Dustbin JS\r\n\r\nA JSON-backed object database for your web browser. It's a light wrapper around local/session storage, designed to\r\nbehave much like a standard NoSQL database. (In fact, it's design is heavily influenced by [Riak](http://basho.com/riak/),\r\nmy personal favoriate NoSQL.)\r\n\r\n## Overview\r\n\r\nDustbin has the concepts of 'bins', which are loosely analogous to tables in SQL, or collections/buckets in NoSQL.\r\nBasically, they are collections of objects able to be referenced by a name. (In fact, Dustbin simply uses an anonymous\r\nobject for each bin).\r\n\r\nInside each bin, objects are stored by key. Keys are _always_ strings, but they can be any key you can set on a\r\njavascript object. The objects that are stored _must_ be able to be turned into a JSON string. That is the only\r\nrestriction. (Really, it's the cost of doing business with localStorage; it doesn't support storage of objects,\r\nonly strings and integers.)\r\n\r\n## Usage\r\n\r\nUsing Dustbin is incredibly easy. When you include dustbin, it creates a new object on window, called `dustbin`. Here's\r\nan example of basic usage:\r\n\r\n```javascript\r\nvar obj = {'foo': \"bar\"};\r\n\r\n// Store the object.\r\ndustbin.store(\"testBin\", \"testObj\", obj);\r\n\r\n// Retrieve it by key.\r\nobj = dustbin.get(\"testBin\", \"testObj\");\r\n\r\n// Alternative syntax.\r\nobj = dustbin.get(\"testBin\")[\"testObj\"];\r\n```\r\n\r\nThat's all there is to it!\r\n\r\n### RequireJS support\r\n\r\nRecently, I've added support for RequireJS. While it's optional (and will remain so), the support seems to work very\r\nwell. You can simply use it like any other RequireJS module:\r\n\r\n```javascript\r\nrequire(['dustbin'], function(dustbin)\r\n{\r\n    var key = dustbin.store(\"testBin\", obj);\r\n});\r\n```\r\n\r\nThough the support has been tested (and is part of the unit tests), I still consider the RequireJS support experimental.\r\nIf you encounter any issues, please file a ticket. (Make sure to include a test case!)\r\n\r\n### Auto-generated Keys\r\n\r\nYou're not required to have a key to store your object under. Dustbin will automatically generate a key for you if you\r\ndon't pass one in:\r\n\r\n```javascript\r\nvar obj = {'foo': \"bar\"};\r\n\r\n// Store the object.\r\nvar key = dustbin.store(\"testBin\", obj);\r\n\r\n// Key will be something like: \"LTMwMzk5OTQ2MA==\"\r\nconsole.log(\"Key:\", key);\r\n\r\n// Retrieve it by key.\r\nobj = dustbin.get(\"testBin\", key);\r\n```\r\n\r\n### Retrieve entire bin object\r\n\r\nYou can also retrieve the entire bin object:\r\n\r\n```javascript\r\nbin = dustbin.get(\"testBin\");\r\n```\r\n\r\nThis allows for the alternative (and in my opinion, cleaner) syntax:\r\n\r\n```javascript\r\nobj = dustbin.get(\"testBin\")[\"testObj\"];\r\n```\r\n\r\n### Remove an object\r\n\r\nYou can remove an object by key:\r\n\r\n```javascript\r\ndustbin.remove(\"testBin\", \"testObj\");\r\n```\r\n\r\n### Remove all objects in a bin\r\n\r\nYou can even remove all objects from a bin:\r\n\r\n```javascript\r\ndustbin.removeAllKeys(\"testBin\");\r\n```\r\n\r\n### Basic Query support\r\n\r\nCurrently, only basic query support has been added. You will need to construct an object containing `key` and `value`\r\nwhere you want back a list of object that have `key` equal to `value`. Here's an example:\r\n\r\n```javascript\r\nvar alex = {animal:\"cat\", name: \"alex\", age: 4};\r\nvar izzy = {animal:\"cat\", name: \"izzy\", age: 4};\r\nvar baal = {animal:\"snake\", name: \"baal\", age: 2};\r\n\r\ndustbin.store(\"pets\", alex);\r\ndustbin.store(\"pets\", izzy);\r\ndustbin.store(\"pets\", baal);\r\n\r\n// `cats` will be equal to `[alex, izzy]`\r\nvar cats = dustbin.query(\"pets\", {animal: \"cat\"});\r\n\r\n// `pets` will be equal to `[alex, izzy, baal]`\r\nvar pets = dustbin.query(\"pets\", {});\r\n```\r\n\r\nRight now the only thing supported is pure _equality_, **not** _equivalence_. Also, this is basically two nested `forEach`\r\ncalls, so performance isn't as good as it could be. I'll be looking at improving this in the future, but for now it\r\nshould meet most needs.\r\n\r\n### Session store support\r\n\r\nAll operations can also be done on the session store. By default, the `dustbin` object's functions are simply wrappers\r\nfor `dustbin.local`. As such, you can also access the session store by using: `dustbin.session`. Here's some examples:\r\n\r\n```javascript\r\nvar obj = {'foo': \"bar\"};\r\n\r\n// Store the object.\r\ndustbin.session.store(\"testBin\", \"testObj\", obj);\r\n\r\n// Retrieve it by key.\r\nobj = dustbin.session.get(\"testBin\", \"testObj\");\r\n\r\n// Alternative syntax.\r\nobj = dustbin.session.get(\"testBin\")[\"testObj\"];\r\n```\r\n\r\nAs you can see, it supports all the same operations as the local storage functions. There is absolutely no difference,\r\nexcept the inherent difference of session storage (all objects only last for the duration of the browser session.)\r\n\r\n## Status\r\n\r\nCurrently, all unit tests pass, and the basic functionality is there. You can get, remove and store objects by key.\r\nThere is also basic query support, which I estimate will work for 70% of most use cases. As near as I can tell, this\r\ncode is simple enough it can be used in a production site.\r\n\r\nThat being said, I would very much like to add support for [map/reduce](http://docs.basho.com/riak/latest/tutorials/querying/MapReduce/)\r\nand a [django-like query api](https://docs.djangoproject.com/en/dev/ref/models/querysets/#id4). I will work on that as\r\nI have time. If you would like to implement these features, I am more than willing to accept pull requests.\r\n\r\n## Contribution\r\n\r\nAs mentioned, I'm more than willing to accept pull requests. I will require you to follow\r\n[my code format](https://github.com/Morgul/dustbin/wiki/Code-Style). I also reserve the rights to reject any features\r\nthat rely heavily on experimental features, or lock users into one way system for using Dustbin. (There's a readon why\r\nthe RequireJS support is optional.)\r\n\r\n### Reporting issues\r\n\r\nI'm more than happy to have issues reported! All that I ask is a clear description of the problem, along with a test\r\ncase. I don't have the time or inclination to wade through your application to try and discover the causes for a bug. So,\r\nwhenever possible, please try and give me a small test case (Or, preferably, a pull-request with new unit tests that\r\nshow the failure!)\r\n\r\nThat all being said, don't wait to file a bug until you have a use case. I'd rather know there's a potential issue asap;\r\nyou can feel free to file an issue, and attach the test case to it later. Just make it clear you're working on it. If\r\nyou're having trouble isolating it, I'm more than willing to lend a hand, provided I have the time. Feel free to ask.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}